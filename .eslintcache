[{"C:\\Users\\miggr\\development\\process-gantt\\src\\SJF\\SJF.tsx":"1","C:\\Users\\miggr\\development\\process-gantt\\src\\index.tsx":"2","C:\\Users\\miggr\\development\\process-gantt\\src\\SJF\\Form.tsx":"3","C:\\Users\\miggr\\development\\process-gantt\\src\\SJF\\Clock.tsx":"4","C:\\Users\\miggr\\development\\process-gantt\\src\\App.tsx":"5","C:\\Users\\miggr\\development\\process-gantt\\src\\Prioridad\\Form.tsx":"6","C:\\Users\\miggr\\development\\process-gantt\\src\\Prioridad\\Prioridad.tsx":"7","C:\\Users\\miggr\\development\\process-gantt\\src\\RoundRobin\\Form.tsx":"8","C:\\Users\\miggr\\development\\process-gantt\\src\\RoundRobin\\RoundRobin.tsx":"9"},{"size":9897,"mtime":1611428962308,"results":"10","hashOfConfig":"11"},{"size":219,"mtime":1607454897370,"results":"12","hashOfConfig":"11"},{"size":5503,"mtime":1611371445775,"results":"13","hashOfConfig":"11"},{"size":831,"mtime":1611387445401,"results":"14","hashOfConfig":"11"},{"size":886,"mtime":1612926382147,"results":"15","hashOfConfig":"11"},{"size":6757,"mtime":1612206091874,"results":"16","hashOfConfig":"11"},{"size":10788,"mtime":1612207406455,"results":"17","hashOfConfig":"11"},{"size":5971,"mtime":1613020111857,"results":"18","hashOfConfig":"11"},{"size":12663,"mtime":1613021443510,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"q9lowg",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\miggr\\development\\process-gantt\\src\\SJF\\SJF.tsx",["39","40","41","42","43","44","45"],"C:\\Users\\miggr\\development\\process-gantt\\src\\index.tsx",[],"C:\\Users\\miggr\\development\\process-gantt\\src\\SJF\\Form.tsx",["46","47","48"],"C:\\Users\\miggr\\development\\process-gantt\\src\\SJF\\Clock.tsx",[],"C:\\Users\\miggr\\development\\process-gantt\\src\\App.tsx",["49","50","51","52","53"],"C:\\Users\\miggr\\development\\process-gantt\\src\\Prioridad\\Form.tsx",["54","55","56"],"import React, { useState, useEffect } from \"react\";\r\nimport { Process } from \"../App\";\r\nimport { ProcessNode, ProcessQueue } from \"./Prioridad\";\r\n\r\ntype Props = {\r\n  processes: Array<Process>;\r\n  setProcesses: Function;\r\n  processesQueue: ProcessQueue;\r\n  addProcessToQueue: (process: Process) => void;\r\n};\r\n\r\nconst Form: React.FC<Props> = ({\r\n  processes,\r\n  setProcesses,\r\n  addProcessToQueue,\r\n  processesQueue,\r\n}) => {\r\n  const [currentName, setCurrentName] = useState(\"\");\r\n  const [currentArriveTime, setCurrentArriveTime] = useState(\"0\");\r\n  const [currentBurstTIme, setCurrentBurstTime] = useState(\"0\");\r\n  const [currentPriority, setCurrentPriority] = useState(\"0\");\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [randomIndex, setRandomIndex] = useState(0);\r\n\r\n  const addProcess = (queue: Array<Process>): Array<Process> => {\r\n    queue.sort((a, b) => {\r\n      if (a.arriveTime === b.arriveTime) {\r\n        return a.burstTime - b.burstTime;\r\n      }\r\n\r\n      return a.arriveTime - b.arriveTime;\r\n    });\r\n\r\n    return fillProcessesData(queue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setRandomIndex(randomIndex + 1);\r\n  }, [processesQueue]);\r\n\r\n  //Organize and fill data table\r\n  const fillProcessesData = (\r\n    queue: Array<Process>,\r\n    time: number = 0\r\n  ): Array<Process> => {\r\n    if (!queue.length) return [];\r\n\r\n    //Search process that could be executed in that moment\r\n    const processesReady = queue.filter(\r\n      (process) => process.arriveTime <= time\r\n    );\r\n\r\n    //If is a time window with no process ready find in next time moment\r\n    if (!processesReady?.length) return fillProcessesData(queue, time + 1);\r\n\r\n    //Current process: ready and with the shortest burst time (if are equal search what arrive first)\r\n    const selected = processesReady.reduce((sel, process) => {\r\n      if (!sel) return process;\r\n\r\n      if (process.priority < sel.priority) return process;\r\n      if (process.priority > sel.priority) return sel;\r\n      if (process.priority === sel.priority) {\r\n        if (process.arriveTime < sel.arriveTime) return process;\r\n        if (process.arriveTime > sel.arriveTime) return sel;\r\n        if (process.arriveTime === sel.arriveTime) {\r\n          return process.index < sel.index ? process : sel;\r\n        }\r\n      }\r\n    }, null);\r\n\r\n    const finishTime = time + selected.burstTime;\r\n    const returnTime = finishTime - selected.arriveTime;\r\n    const waitTime = returnTime - selected.burstTime;\r\n\r\n    const finalProcess: Process = {\r\n      ...selected,\r\n      startTime: time,\r\n      finishTime,\r\n      returnTime,\r\n      waitTime,\r\n    };\r\n\r\n    const newQueue = queue.filter(\r\n      (process) => process.index !== selected.index\r\n    );\r\n\r\n    return [finalProcess, ...fillProcessesData(newQueue, finishTime)];\r\n  };\r\n\r\n  const handleNewProcess = () => {\r\n    addProcessToQueue({\r\n      index: currentIndex,\r\n      name: currentName,\r\n      arriveTime: +currentArriveTime,\r\n      burstTime: +currentBurstTIme,\r\n      priority: +currentPriority,\r\n      remainingTime: +currentBurstTIme,\r\n    });\r\n\r\n    setProcesses(\r\n      addProcess([\r\n        ...processes,\r\n        {\r\n          index: currentIndex,\r\n          name: currentName,\r\n          arriveTime: +currentArriveTime,\r\n          burstTime: +currentBurstTIme,\r\n          priority: +currentPriority,\r\n          remainingTime: +currentBurstTIme,\r\n        },\r\n      ])\r\n    );\r\n\r\n    setCurrentArriveTime(\"0\");\r\n    setCurrentBurstTime(\"0\");\r\n    setCurrentPriority(\"0\");\r\n    setCurrentName(\"\");\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <table className=\"data-table\">\r\n        <tr>\r\n          <th>\r\n            <div className=\"data-table__row\">Proceso</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. llegada</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. rafaga</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">Prioridad</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. comienzo</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. final</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. retorno</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. espera</div>\r\n          </th>\r\n        </tr>\r\n        <React.Fragment key={randomIndex}>\r\n          {processes\r\n            ?.sort((a, b) => a.index - b.index)\r\n            .map((process: Process) => {\r\n              const realValue =\r\n                processesQueue?.find((p) => p.index === process.index)\r\n                  ?.realValues || null;\r\n\r\n              return (\r\n                <tr>\r\n                  <td>{process.name}</td>\r\n                  <td>{process.arriveTime}</td>\r\n                  <td>{process.burstTime}</td>\r\n                  <td>{process.priority}</td>\r\n                  <td>{realValue?.startTime || process.startTime}</td>\r\n                  <td>{realValue?.finishTime || process.finishTime}</td>\r\n                  <td>{realValue?.returnTime || process.returnTime}</td>\r\n                  <td>{realValue?.waitTime || process.waitTime}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n\r\n          <tr>\r\n            <td className=\"input-cell\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"table-input\"\r\n                value={currentName}\r\n                onChange={({ target: { value } }) => setCurrentName(value)}\r\n              />\r\n            </td>\r\n            <td className=\"input-cell\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"table-input\"\r\n                value={currentArriveTime}\r\n                onChange={({ target: { value } }) =>\r\n                  setCurrentArriveTime(value)\r\n                }\r\n              />\r\n            </td>\r\n            <td className=\"input-cell\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"table-input\"\r\n                value={currentBurstTIme}\r\n                onChange={({ target: { value } }) => setCurrentBurstTime(value)}\r\n              />\r\n            </td>\r\n            <td className=\"input-cell\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"table-input\"\r\n                value={currentPriority}\r\n                onChange={({ target: { value } }) => setCurrentPriority(value)}\r\n              />\r\n            </td>\r\n          </tr>\r\n        </React.Fragment>\r\n      </table>\r\n      <button className=\"the-button\" onClick={() => handleNewProcess()}>\r\n        + Agregar proceso\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","C:\\Users\\miggr\\development\\process-gantt\\src\\Prioridad\\Prioridad.tsx",["57","58","59","60","61"],"C:\\Users\\miggr\\development\\process-gantt\\src\\RoundRobin\\Form.tsx",["62","63","64"],"C:\\Users\\miggr\\development\\process-gantt\\src\\RoundRobin\\RoundRobin.tsx",["65","66","67","68","69"],{"ruleId":"70","severity":1,"message":"71","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":20},{"ruleId":"70","severity":1,"message":"74","line":6,"column":8,"nodeType":"72","messageId":"73","endLine":6,"endColumn":18},{"ruleId":"70","severity":1,"message":"75","line":10,"column":6,"nodeType":"72","messageId":"73","endLine":10,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":147,"column":13,"nodeType":"78","messageId":"79","endLine":147,"endColumn":62},{"ruleId":"76","severity":1,"message":"80","line":164,"column":11,"nodeType":"78","messageId":"79","endLine":164,"endColumn":67},{"ruleId":"81","severity":1,"message":"82","line":186,"column":6,"nodeType":"83","endLine":186,"endColumn":24,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":219,"column":59,"nodeType":"78","messageId":"87","endLine":219,"endColumn":61},{"ruleId":"70","severity":1,"message":"88","line":1,"column":27,"nodeType":"72","messageId":"73","endLine":1,"endColumn":36},{"ruleId":"70","severity":1,"message":"89","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":21},{"ruleId":"85","severity":1,"message":"86","line":50,"column":59,"nodeType":"78","messageId":"87","endLine":50,"endColumn":61},{"ruleId":"70","severity":1,"message":"88","line":1,"column":17,"nodeType":"72","messageId":"73","endLine":1,"endColumn":26},{"ruleId":"70","severity":1,"message":"90","line":1,"column":28,"nodeType":"72","messageId":"73","endLine":1,"endColumn":36},{"ruleId":"70","severity":1,"message":"91","line":3,"column":8,"nodeType":"72","messageId":"73","endLine":3,"endColumn":19},{"ruleId":"70","severity":1,"message":"92","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":17},{"ruleId":"70","severity":1,"message":"93","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":11},{"ruleId":"70","severity":1,"message":"89","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":21},{"ruleId":"81","severity":1,"message":"94","line":39,"column":6,"nodeType":"83","endLine":39,"endColumn":22,"suggestions":"95"},{"ruleId":"85","severity":1,"message":"86","line":57,"column":59,"nodeType":"78","messageId":"87","endLine":57,"endColumn":61},{"ruleId":"70","severity":1,"message":"75","line":8,"column":6,"nodeType":"72","messageId":"73","endLine":8,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":173,"column":13,"nodeType":"78","messageId":"79","endLine":173,"endColumn":62},{"ruleId":"76","severity":1,"message":"80","line":190,"column":11,"nodeType":"78","messageId":"79","endLine":190,"endColumn":67},{"ruleId":"81","severity":1,"message":"82","line":212,"column":6,"nodeType":"83","endLine":212,"endColumn":24,"suggestions":"96"},{"ruleId":"85","severity":1,"message":"86","line":244,"column":59,"nodeType":"78","messageId":"87","endLine":244,"endColumn":61},{"ruleId":"70","severity":1,"message":"89","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":21},{"ruleId":"81","severity":1,"message":"94","line":26,"column":6,"nodeType":"83","endLine":26,"endColumn":22,"suggestions":"97"},{"ruleId":"85","severity":1,"message":"86","line":56,"column":59,"nodeType":"78","messageId":"87","endLine":56,"endColumn":61},{"ruleId":"70","severity":1,"message":"75","line":8,"column":6,"nodeType":"72","messageId":"73","endLine":8,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":219,"column":13,"nodeType":"78","messageId":"79","endLine":219,"endColumn":62},{"ruleId":"76","severity":1,"message":"80","line":231,"column":11,"nodeType":"78","messageId":"79","endLine":231,"endColumn":67},{"ruleId":"81","severity":1,"message":"98","line":253,"column":6,"nodeType":"83","endLine":253,"endColumn":24,"suggestions":"99"},{"ruleId":"85","severity":1,"message":"86","line":288,"column":59,"nodeType":"78","messageId":"87","endLine":288,"endColumn":61},"@typescript-eslint/no-unused-vars","'isAccessor' is defined but never used.","Identifier","unusedVar","'GanttGraph' is defined but never used.","'ProcessNodeType' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'tail'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'blockedTail'.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'blockedProcesses', 'isAvailable', 'noChangeQueue', and 'processesQueue'. Either include them or remove the dependency array.","ArrayExpression",["100"],"array-callback-return","Array.prototype.reduce() expects a value to be returned at the end of arrow function.","expectedAtEnd","'useEffect' is defined but never used.","'ProcessNode' is defined but never used.","'useState' is defined but never used.","'FirstMethod' is defined but never used.","'Prioridad' is defined but never used.","'SJF' is defined but never used.","React Hook useEffect has a missing dependency: 'randomIndex'. Either include it or remove the dependency array. You can also do a functional update 'setRandomIndex(r => ...)' if you only need 'randomIndex' in the 'setRandomIndex' call.",["101"],["102"],["103"],"React Hook useEffect has missing dependencies: 'blockCurrentProcess', 'blockedProcesses', 'cuantum', 'currentProcess', 'isAvailable', 'noChangeQueue', and 'processesQueue'. Either include them or remove the dependency array.",["104"],{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"105","fix":"109"},{"desc":"107","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [isRunning, clock, noChangeQueue, processesQueue, blockedProcesses, isAvailable]",{"range":"113","text":"114"},"Update the dependencies array to be: [processesQueue, randomIndex]",{"range":"115","text":"116"},{"range":"117","text":"114"},{"range":"118","text":"116"},"Update the dependencies array to be: [isRunning, clock, noChangeQueue, processesQueue, blockedProcesses, isAvailable, currentProcess, cuantum, blockCurrentProcess]",{"range":"119","text":"120"},[4445,4463],"[isRunning, clock, noChangeQueue, processesQueue, blockedProcesses, isAvailable]",[1147,1163],"[processesQueue, randomIndex]",[5317,5335],[791,807],[6612,6630],"[isRunning, clock, noChangeQueue, processesQueue, blockedProcesses, isAvailable, currentProcess, cuantum, blockCurrentProcess]"]