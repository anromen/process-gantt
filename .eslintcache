[{"C:\\Users\\miggr\\development\\process-gantt\\src\\index.tsx":"1","C:\\Users\\miggr\\development\\process-gantt\\src\\Form.tsx":"2","C:\\Users\\miggr\\development\\process-gantt\\src\\App.tsx":"3","C:\\Users\\miggr\\development\\process-gantt\\src\\GanttGraph.tsx":"4"},{"size":219,"mtime":1607454897370,"results":"5","hashOfConfig":"6"},{"size":4049,"mtime":1607461162869,"results":"7","hashOfConfig":"6"},{"size":585,"mtime":1607461337691,"results":"8","hashOfConfig":"6"},{"size":1496,"mtime":1607460179931,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7kmixj",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\miggr\\development\\process-gantt\\src\\index.tsx",[],"C:\\Users\\miggr\\development\\process-gantt\\src\\Form.tsx",["20"],"import React, { useState, useEffect } from \"react\";\r\nimport { Process } from \"./App\";\r\n\r\ntype Props = {\r\n  processes: Array<Process>;\r\n  setProcesses: Function;\r\n};\r\n\r\nconst Form: React.FC<Props> = ({ processes, setProcesses }) => {\r\n  const [currentName, setCurrentName] = useState(\"\");\r\n  const [currentArriveTime, setCurrentArriveTime] = useState(\"0\");\r\n  const [currentBurstTIme, setCurrentBurstTime] = useState(\"0\");\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n  const getPrevFinishTime = (processIndex: number) => {\r\n    const prev = processes.find(({ index }) => index === processIndex - 1);\r\n\r\n    console.log(\"#wtf\", processes);\r\n\r\n    return prev?.finishTime || -1;\r\n  };\r\n  const getStartTime = (process: Process): Process => {\r\n    return {\r\n      ...process,\r\n      startTime: Math.max(process.arriveTime, getPrevFinishTime(process.index)),\r\n    };\r\n  };\r\n  const getFinishTime = (process: Process): Process => {\r\n    return { ...process, finishTime: process.startTime + process.burstTime };\r\n  };\r\n  const getReturnTime = (process: Process): Process => {\r\n    return { ...process, returnTime: process.finishTime - process.arriveTime };\r\n  };\r\n  const getWaitTime = (process: Process): Process => {\r\n    return { ...process, waitTime: process.returnTime - process.burstTime };\r\n  };\r\n  const calculateProcessValues = (process: Process) => {\r\n    return getWaitTime(getReturnTime(getFinishTime(getStartTime(process))));\r\n  };\r\n\r\n  const handleNewProcess = () => {\r\n    setProcesses([\r\n      ...processes,\r\n      calculateProcessValues({\r\n        index: currentIndex,\r\n        name: currentName,\r\n        arriveTime: +currentArriveTime,\r\n        burstTime: +currentBurstTIme,\r\n      } as Process),\r\n    ]);\r\n\r\n    setCurrentArriveTime(\"0\");\r\n    setCurrentBurstTime(\"0\");\r\n    setCurrentName(\"\");\r\n    setCurrentIndex(currentIndex + 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <table className=\"data-table\">\r\n        <tr>\r\n          <th>\r\n            <div className=\"data-table__row\">Proceso</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. llegada</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. rafaga</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. comienzo</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. final</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. retorno</div>\r\n          </th>\r\n          <th>\r\n            <div className=\"data-table__row\">T. espera</div>\r\n          </th>\r\n        </tr>\r\n        {processes?.map((process: Process) => (\r\n          <tr>\r\n            <td>{process.name}</td>\r\n            <td>{process.arriveTime}</td>\r\n            <td>{process.burstTime}</td>\r\n            <td>{process.startTime}</td>\r\n            <td>{process.finishTime}</td>\r\n            <td>{process.returnTime}</td>\r\n            <td>{process.waitTime}</td>\r\n          </tr>\r\n        ))}\r\n\r\n        <tr>\r\n          <td className=\"input-cell\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"table-input\"\r\n              value={currentName}\r\n              onChange={({ target: { value } }) => setCurrentName(value)}\r\n            />\r\n          </td>\r\n          <td className=\"input-cell\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"table-input\"\r\n              value={currentArriveTime}\r\n              onChange={({ target: { value } }) => setCurrentArriveTime(value)}\r\n            />\r\n          </td>\r\n          <td className=\"input-cell\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"table-input\"\r\n              value={currentBurstTIme}\r\n              onChange={({ target: { value } }) => setCurrentBurstTime(value)}\r\n            />\r\n          </td>\r\n        </tr>\r\n      </table>\r\n      <button className=\"the-button\" onClick={() => handleNewProcess()}>\r\n        + Agregar proceso\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","C:\\Users\\miggr\\development\\process-gantt\\src\\App.tsx",[],"C:\\Users\\miggr\\development\\process-gantt\\src\\GanttGraph.tsx",["21"],"import React, { useEffect, useState } from \"react\";\r\nimport { Process } from \"./App\";\r\n\r\ntype Props = {\r\n  processes: Array<Process>;\r\n};\r\n\r\nconst GanttGraph: React.FC<Props> = ({ processes }) => {\r\n  const [maxValue, setMaxValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setMaxValue(\r\n      processes.reduce(\r\n        (max, process) => (process.finishTime > max ? process.finishTime : max),\r\n        maxValue\r\n      )\r\n    );\r\n  }, [processes]);\r\n\r\n  return !!processes?.length ? (\r\n    <div className=\"chart-wrapper\">\r\n      <table className=\"chart\">\r\n        <tr>\r\n          <th>Proceso</th>\r\n          {new Array(maxValue).fill(null).map((_, index) => (\r\n            <th>\r\n              <div className=\"chart-number-header\">{index}</div>\r\n            </th>\r\n          ))}\r\n        </tr>\r\n        {processes.map((process) => (\r\n          <tr key={process.index}>\r\n            <td>{process.name}</td>\r\n            {new Array(maxValue).fill(null).map((_, index) => (\r\n              <td\r\n                key={`${process.index}-${index}`}\r\n                className={\r\n                  index >= process.arriveTime && index < process.startTime\r\n                    ? \"waiting\"\r\n                    : index >= process.startTime && index < process.finishTime\r\n                    ? \"running\"\r\n                    : \"normal\"\r\n                }\r\n              />\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </table>\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n};\r\n\r\nexport default GanttGraph;\r\n",{"ruleId":"22","severity":1,"message":"23","line":1,"column":27,"nodeType":"24","messageId":"25","endLine":1,"endColumn":36},{"ruleId":"26","severity":1,"message":"27","line":18,"column":6,"nodeType":"28","endLine":18,"endColumn":17,"suggestions":"29"},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'maxValue'. Either include it or remove the dependency array. You can also do a functional update 'setMaxValue(m => ...)' if you only need 'maxValue' in the 'setMaxValue' call.","ArrayExpression",["30"],{"desc":"31","fix":"32"},"Update the dependencies array to be: [maxValue, processes]",{"range":"33","text":"34"},[435,446],"[maxValue, processes]"]